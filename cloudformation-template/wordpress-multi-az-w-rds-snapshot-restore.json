{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS Multi-AZ Webserver with RDS backen with 2 public and 2 private subnets inside a vpc.",


  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label": { "default": "Application Configuration" },
          "Parameters": [ "ProjectName", "CodeCommitRepositoryName", "CodeCommitBranch", "StackType", "CodeDeploymentEnabled" ]
        },
        {
          "Label": { "default": "Network Configuration" },
          "Parameters": [ "VPCCidrForPeering" ]
        },
        {
          "Label" : { "default" : "Amazon EC2 Configuration" },
          "Parameters" : [ "WebServerInstanceType", "KeyName" ]
        },
        {
          "Label" : { "default" : "Auto-scaling Configuration" },
          "Parameters" : [ "MaxWebServerCount", "MinWebServerCount", "ScalingIncrement", "AutoScalingCoolDown" ]
        },
        {
          "Label" : { "default" : "Load Balancer Configuration" },
          "Parameters" : [ "ELBCertificate", "ELBGracePeriod" ]
        },
        {
          "Label" : { "default" : "CloudFront Distribution" },
          "Parameters" : [ "CloudFrontEnabled", "DomainName", "CloudFrontCertificate" ]
        },
        {
          "Label" : { "default" : "Database Service Configuration" },
          "Parameters" : [ "RDSInstanceType", "RDSMultiAZOption", "RDSServerStorage", "RDSEncryption", "DatabaseBackupRetentionPeriod" ]
        },
        {
          "Label" : { "default" : "Database Setup" },
          "Parameters" : [ "DBName", "DBUserName", "DBPassword", "RDSSnapshotName" ]
        },
        {
          "Label" : { "default" : "Monitoring" },
          "Parameters" : [ "SNSTopic", "WebServerInstanceMonitoring", "ELBRequestAlarmThreshold" ]
        }
      ],
      "ParameterLabels" : {
        "ProjectName" : { "default" : "What is the Project Name?" },
        "CodeCommitRepositoryName" : { "default" : "What is the Code Commit Repository name?"},
        "StackType" : { "default" : "Is this Production, Devevelopment, or Test Environment?"},
        "RDSSnapshotName" : { "default" : "RDS Restore Snapshot Name (Optional)?"},
        "CodeDeploymentEnabled" : { "default" : "Automatically deploy code from CodeCommit? If false Code Pipeline will have to be created manually."}
      }
    }
  },

  "Parameters" : {

    "StackType" : {
      "Type" : "String",
      "Description" : "Is this a production, stage, test, dev, or other environment",
      "AllowedValues" : [
        "PROD",
        "DEV",
        "TEST",
        "CERT",
        "OTHER"
      ],
      "Default" : "PROD"
    },

    "ProjectName" : {
      "Type" : "String",
      "Description" : "To what project does this stack belong."
    },

    "CodeCommitRepositoryName": {
      "Type": "String",
      "Description": "CodeCommit Repository name for CodeDeploy and CodePipeline"
    },

    "SNSTopic": {
      "Type": "String",
      "Description": "ARN for the SNS topic to send alert to when triggered."
    },

    "CodeCommitBranch": {
      "Type": "String",
      "Description": "CodeCommit Repository name for CodeDeploy and CodePipeline",
      "Default" :  "master"
    },

    "ELBCertificate" : {
      "Type" : "String",
      "Description" : "Public Certificate ID issued by Amazon Certificate Authority. Used to derive Arn for resource in the ELB.",
      "Default" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    },

    "WebServerInstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "WebServerInstanceMonitoring" : {
      "Description" : "Detailed Monitoring (Default is False). Cost extra.",
      "Type" : "String",
      "Default" : "False",
      "AllowedValues" : [ "True", "False" ]
    },

    "MaxWebServerCount" : {
      "Type" : "Number",
      "Description" : "Max number of servers for auto scaling group for Web Server layer.",
      "Default" : "4"
    },

    "MinWebServerCount" : {
      "Type" : "Number",
      "Description" : "Minimum number of servers for auto scaling group for Web Server layer.",
      "Default" : "2"
    },

    "ScalingIncrement" : {
      "Type" : "Number",
      "Description" : "The number of servers you want added or removed based on demand.",
      "Default" : "1"
    },

    "ELBRequestAlarmThreshold" : {
      "Type" : "Number",
      "Description" : "The number of transaction requests per hour that will trigger an alert.",
      "Default" : "2500"
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "RDSInstanceType" : {
      "Description" : "RDS instance type",
      "Type" : "String",
      "Default" : "db.t2.micro",
      "AllowedValues" : [ "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large", "db.m3.medium", "db.m3.large", "db.m4,large" ],
      "ConstraintDescription" : "must be a valid RDS instance type."
    },

    "RDSMultiAZOption" : {
      "Description" : "Launch failover databases in alternate AZ.",
      "Type" : "String",
      "Default" : "False",
      "AllowedValues" : [ "True", "False" ]
    },

    "RDSSnapshotName" : {
      "Description" : "RDS Snapshot to restore from for new stack (Optional). Provide RDS Snapshot Name or ARN.",
      "Type" : "String",
      "Default" : ""
    },

    "RDSServerStorage" : {
      "Type" : "String",
      "Description" : "Database storage amount in GB. Recommend at least 5 GBs.",
      "Default" : "5"
    },

    "RDSEncryption" : {
      "Type" : "String",
      "Description" : "Encrypt database volume.",
      "Default" : "False",
      "AllowedValues" : [ "True", "False" ]
    },

    "DatabaseBackupRetentionPeriod" : {
      "Type" : "String",
      "Description" : "Number of days to keep a backup of the database.",
      "Default" : "12"
    },

    "DBName" : {
      "Type" : "String",
      "Description" : "What is the name of the database",
      "Default" : "FirstDB"
    },

    "DBUserName" : {
      "Type" : "String",
      "Description" : "What is the username for the database",
      "Default" : "FirstDBUser"
    },

    "DBPassword" : {
      "Type" : "String",
      "Description" : "What is the password for the database user",
      "Default" : "FirstDBUserPassword",
      "NoEcho" : "True"
    },

    "S3Repository" : {
      "Type" : "String",
      "Description" : "S3 bucket name for configuration, backup, etc. files as needed.",
      "Default" : "nonexistantbucket"
    },

    "CodeDeploymentEnabled" : {
      "Type" : "String",
      "Description" : "Create Code Pipeline to enable automatic deployment.",
      "Default" : "True",
      "AllowedValues" : [ "True", "False" ]
    },

    "DomainName": {
      "Type": "String",
      "Description": "Alternate CNAMES for the CloudFront Distribution.",
      "Default": ""
    },

    "CloudFrontCertificate" : {
      "Type": "String",
      "Description": "Certificate to use with the CloudFront Distribution. Must be in US-EAST-1.",
      "Default": ""
    },

    "CloudFrontEnabled" : {
      "Type" : "String",
      "Description" : "Create CloudFront Distribution.",
      "Default" : "True",
      "AllowedValues" : [ "True", "False" ]
    },

    "ELBGracePeriod": {
      "Type": "String",
      "Description": "Amount of time an instance is allowed before ELB will start healthchecks.",
      "Default": "600"
    },

    "AutoScalingCoolDown": {
      "Type": "String",
      "Description": "Amount of grace time between scaling actions by AutoScaling.",
      "Default": "600"
    },

    "VPCCidrForPeering": {
      "Type": "String",
      "Description": "Amount of grace time between scaling actions by AutoScaling.",
      "Default": "172.16.0.0/16"
    }
  },

  "Mappings" : {
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/25" },
      "PublicSubnet1"  : { "CIDR" : "10.0.0.0/28" },
      "PublicSubnet2"  : { "CIDR" : "10.0.0.16/28" },
      "WebServerSubnet1"  : { "CIDR" : "10.0.0.32/28" },
      "WebServerSubnet2"  : { "CIDR" : "10.0.0.48/28" },
      "RDSSubnet1"  : { "CIDR" : "10.0.0.64/28" },
      "RDSSubnet2"  : { "CIDR" : "10.0.0.80/28" }
    },

    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "t3.nano"     : { "Arch" : "HVM64"  },
      "t3.micro"    : { "Arch" : "HVM64"  },
      "t3.small"    : { "Arch" : "HVM64"  },
      "t3.medium"   : { "Arch" : "HVM64"  },
      "t3.large"    : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "m4.16xlarge" : { "Arch" : "HVM64"  },
      "m5.large"    : { "Arch" : "HVM64"  },
      "m5.xlarge"   : { "Arch" : "HVM64"  },
      "m5.2xlarge"  : { "Arch" : "HVM64"  },
      "m5.4xlarge"  : { "Arch" : "HVM64"  },
      "m5.12xlarge" : { "Arch" : "HVM64"  },
      "m5.24xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-4dd18837", "HVMG2" : "ami-2e5e9c43"},
      "us-east-2"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-e282a987", "HVMG2" : "ami-2e5e9c43"},
      "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-d9ababb9", "HVMG2" : "ami-fd76329d"},
      "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-1f0abe67", "HVMG2" : "ami-83b770e3"}
    },

    "ELBPrinciple" : {
      "us-east-1" : { "AccountID" : "127311923021" },
      "us-west-1" : { "AccountID" : "027434742980" },
      "us-west-2" : { "AccountID" : "797873946194" },
      "eu-west-1" : { "AccountID" : "156460612806" },
      "eu-central-1" : { "AccountID" : "054676820928" },
      "ap-northeast-1" : { "AccountID" : "582318560864" },
      "ap-northeast-2" : { "AccountID" : "600734575887" },
      "ap-southeast-1" : { "AccountID" : "114774131450" },
      "ap-southeast-2" : { "AccountID" : "783225319266" },
      "ap-south-1" : { "AccountID" : "718504428378" },
      "sa-east-1" : { "AccountID" : "507241528517" }
    }
  },

  "Conditions" : {

    "UseRDSSnapshot" : { "Fn::Not" : [ { "Fn::Equals" : [ {"Ref" : "RDSSnapshotName" }, "" ] } ] },
    "CreateCodePipeline" : { "Fn::Not" : [ { "Fn::Equals" : [ {"Ref" : "CodeDeploymentEnabled" }, "False" ] } ] },
    "UseAltCNAME" : { "Fn::Not" : [ { "Fn::Equals" : [ {"Ref" : "DomainName" }, "" ] } ] },
    "CreateCloudFront" : { "Fn::Equals" : [ {"Ref" : "CloudFrontEnabled" }, "True" ] }

  },

  "Resources" : {

    "SQS" : {
       "Type" : "AWS::SQS::Queue",
       "Properties" : {
          "DelaySeconds": "0",
          "MaximumMessageSize": "262144",
          "MessageRetentionPeriod": "1209600",
          "QueueName": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "SQS-Events" ] ] },
          "ReceiveMessageWaitTimeSeconds": "0",
          "VisibilityTimeout": "30"
       }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "VPC" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "VPCFlowLog" : {
      "Type" : "AWS::EC2::FlowLog",
      "DependsOn" : [ "VPC", "VPCFlowLogIAMRole" ],
      "Properties" : {
        "DeliverLogsPermissionArn" : { "Fn::GetAtt" : [ "VPCFlowLogIAMRole" , "Arn" ] },
        "LogGroupName" : { "Fn::Join" : [ "", [ { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "/", { "Ref" : "AWS::StackName" }, "/VPC" ] ] },
        "ResourceId" : { "Ref" : "VPC" },
        "ResourceType" : "VPC",
        "TrafficType" : "ALL"
      }
    },

    "VPCFlowLogIAMRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "vpc-flow-logs.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },

    "VPCFlowLogIAMPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "PolicyName" : "VPCFlowLog",
        "Roles" : [ { "Ref" : "VPCFlowLogIAMRole" } ]
      }
    },

    "VPCEndPoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Statement": [
            {
              "Principal": "*",
              "Action": "*",
              "Effect": "Allow",
              "Resource": [
                { "Fn::Join" : [ "", [ "arn:aws:s3:::" , { "Ref" : "S3Bucket" }, "/*" ] ] },
                "arn:aws:s3:::packages.*.amazonaws.com/*",
                "arn:aws:s3:::repo.*.amazonaws.com/*" ,
                "arn:aws:s3:::amazonlinux.*.amazonaws.com/*",
                "arn:aws:s3:::codedeploydemobucket/*",
                "arn:aws:s3:::aws-cloudwatch/*",
                "arn:aws:s3:::us-west-2-birdwatcher-prod/*",
                { "Fn::Join" : ["", [ "arn:aws:s3:::amazon-ssm-", { "Ref" : "AWS::Region" }, "/*" ]]},
                { "Fn::Join" : ["", [ "arn:aws:s3:::aws-codedeploy-", { "Ref" : "AWS::Region" }, "/*" ]]}
              ]
            }
          ]
        },
        "RouteTableIds" : [ { "Ref" : "PublicRouteTable" }, { "Ref" : "PrivateRouteTable" } ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch" : "True",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicSubnet1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "PublicSubnet1" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch" : "True",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicSubnet2", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "PublicSubnet2" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "WebServerSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch" : "True",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "WebServerSubnet1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "WebServerSubnet1" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "WebServerSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch" : "True",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "WebServerSubnet2", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "WebServerSubnet2" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "RDSSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "RDSSubnet1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "RDSSubnet1" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "RDSSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "RDSSubnet2", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "RDSSubnet2" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "IGW" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Public-RouteTable" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Private-RouteTable" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "WebServerSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "WebServerSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "WebTrafficNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "NACL-WebTraffic" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

    "VPCPeeringInboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "VPCCidrForPeering"},
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },

    "VPCPeeringInboundICMPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "1",
        "Icmp" : {
          "Code" : -1,
          "Type" : -1
        },
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "VPCCidrForPeering"}
      }
    },

    "InboundEphemeralNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

    "OutboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "VPCPeeringTCPOutboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Ref" : "VPCCidrForPeering"},
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "VPCPeeringICMPOutboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "1",
        "Icmp" : {
          "Code" : -1,
          "Type" : -1
        },
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Ref" : "VPCCidrForPeering"}
      }
    },

    "WebServerSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet1" },
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" }
      }
    },

    "WebServerSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet2" },
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" }
      }
    },

    "PublicSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" }
      }
    },

    "PublicSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "NetworkAclId" : { "Ref" : "WebTrafficNetworkAcl" }
      }
    },

    "RDSSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "RDSSubnet1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "RDSSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "RDSSubnet2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "RDSNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "RDS-NACL" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "InboundRDSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "PortRange" : { "From" : "3306", "To" : "3306" }
      }
    },

    "VPCPeeringInboundRDSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "VPCCidrForPeering"},
        "PortRange" : { "From" : "3306", "To" : "3306" }
      }
    },

    "OutboundRDSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] },
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "VPCPeeringMySQLOutboundRDSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Ref" : "VPCCidrForPeering"},
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "RDSSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "RDSSubnet1" },
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" }
      }
    },

    "RDSSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "RDSSubnet2" },
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" }
      }
    },

    "EC2WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the EC2 host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "WebServerELBSecurityGroup", "GroupId" ] }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "WebServerELBSecurityGroup", "GroupId" ] }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "VPCCidrForPeering"}
          },
          {
            "IpProtocol" : "icmp",
            "FromPort" : "-1",
            "ToPort" : "-1",
            "CidrIp" : { "Ref" : "VPCCidrForPeering"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "2049",
            "ToPort" : "2049",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]}
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "EC2-SecurityGroup" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "WebServerELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the ELB",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"
        } ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "ELB-SecurityGroup" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "RDSSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "description",
        "SubnetIds" : [
          { "Ref" : "RDSSubnet1" },
          { "Ref" : "RDSSubnet2" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "RDSSubnetGroup" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "RDSWebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn" : "EC2WebServerSecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "3306",
            "ToPort" : "3306",
            "SourceSecurityGroupId" : { "Ref" : "EC2WebServerSecurityGroup" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "3306",
            "ToPort" : "3306",
            "CidrIp" : { "Ref" : "VPCCidrForPeering"}
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "SecurityGroup-RDS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "RDSInstance" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" :
      {
        "AllocatedStorage" : { "Ref" : "RDSServerStorage" },
        "DBInstanceClass" : { "Ref" : "RDSInstanceType" },
        "DBInstanceIdentifier" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "RDS" ] ] },
        "DBName" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            {"Ref" : "AWS::NoValue" },
            { "Ref" : "DBName" }
          ]
        },
        "DBSubnetGroupName" : { "Ref" : "RDSSubnetGroup" },
        "BackupRetentionPeriod" : { "Ref" : "DatabaseBackupRetentionPeriod"},
        "PreferredBackupWindow" : "06:00-06:30",
        "PreferredMaintenanceWindow" : "Sun:07:00-Sun:07:30",
        "DBSnapshotIdentifier" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            {"Ref" : "RDSSnapshotName"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "Engine" : "MySQL",
        "EngineVersion" : "5.6.39",
        "MasterUsername" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            { "Ref" : "AWS::NoValue" },
            { "Ref" : "DBUserName" }
          ]
        },
        "MasterUserPassword" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            { "Ref" : "AWS::NoValue" },
            { "Ref" : "DBPassword" }
          ]
        },
        "MultiAZ" : { "Ref" : "RDSMultiAZOption" },
        "PubliclyAccessible" : "False",
        "StorageEncrypted" : { "Ref" : "RDSEncryption" },
        "StorageType" : "gp2",
        "VPCSecurityGroups" : [ { "Ref" : "RDSWebServerSecurityGroup" }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "RDS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ]
      }
    },

    "WebServerELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true"
          },
          {
            "Key" : "access_logs.s3.bucket",
            "Value" : { "Ref" : "S3Bucket" }
          },
          {
            "Key" : "access_logs.s3.prefix",
            "Value" : "ELB/Logs"
          },
          {
            "Key" : "deletion_protection.enabled",
            "Value" : "false"
          },
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "ELB" ] ] },
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref" : "WebServerELBSecurityGroup"
          }
        ],
        "Subnets": [
          { "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "ELB-WebServers" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
        ],
        "Type": "application",
        "IpAddressType": "ipv4"
      }
    },

    "ELBHTTPListener" : {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": { "Ref" : "ELBHTTPTargetGroup" },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": { "Ref" : "WebServerELB" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },

    "ELBHTTPTargetGroup" : {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 60,
        "HealthCheckPath":  "/health-check.html",
        "HealthCheckPort": "80",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 4,
        "Matcher": {
          "HttpCode" : "200"
        },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "ELB-HTTP-TG" ] ] },
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key" : "stickiness.enabled",
            "Value" : "true"
          }
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 10,
        "VpcId": { "Ref" : "VPC" }
      }
    },

    "ELBHTTPSListener" : {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates" : [
          {
            "CertificateArn" : { "Fn::Join" : [ "", [ "arn:aws:acm:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":certificate/", { "Ref" : "ELBCertificate" } ] ] }
          }
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": { "Ref" : "ELBHTTPSTargetGroup" },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": { "Ref" : "WebServerELB" },
        "Port": 443,
        "Protocol": "HTTPS"
      }
    },

    "ELBHTTPSTargetGroup" : {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 60,
        "HealthCheckPath":  "/health-check.html",
        "HealthCheckPort": "443",
        "HealthCheckProtocol": "HTTPS",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 4,
        "Matcher": {
          "HttpCode" : "200"
        },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "ELB-HTTPS-TG" ] ] },
        "Port": 443,
        "Protocol": "HTTPS",
        "TargetGroupAttributes": [
          {
            "Key" : "stickiness.enabled",
            "Value" : "true"
          }
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 10,
        "VpcId": { "Ref" : "VPC" }
      }
    },

    "EFS" : {
      "Type" : "AWS::EFS::FileSystem",
      "Properties" : {
        "Encrypted" : "True",
        "FileSystemTags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "EFS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } },
          { "Key" : "Patch Group", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "ProjectName" }, { "Ref" : "StackType" } ] ] } }
        ],
        "PerformanceMode" : "generalPurpose"
      }
    },

    "EFSMountTargetWebServerSubnet1" : {
      "Type" : "AWS::EFS::MountTarget",
      "DependsOn" : [ "EFS" ],
      "Properties" : {
        "FileSystemId" : { "Ref" : "EFS" },
        "SecurityGroups" : [ { "Ref" : "EC2WebServerSecurityGroup" } ],
        "SubnetId" : { "Ref" : "WebServerSubnet1" }
      }
    },

    "EFSMountTargetWebServerSubnet2" : {
      "Type" : "AWS::EFS::MountTarget",
      "DependsOn" : [ "EFS" ],
      "Properties" : {
        "FileSystemId" : { "Ref" : "EFS" },
        "SecurityGroups" : [ { "Ref" : "EC2WebServerSecurityGroup" } ],
        "SubnetId" : { "Ref" : "WebServerSubnet2" }
      }
    },

    "WebServerAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "WebServerELB",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "2",
          "Timeout": "PT10M"
        }
      },
      "Properties" : {
        "Cooldown" : { "Ref" : "AutoScalingCoolDown" },
        "DesiredCapacity" : { "Ref" : "MinWebServerCount" },
        "HealthCheckGracePeriod" : { "Ref" : "ELBGracePeriod" },
        "HealthCheckType" : "ELB",
        "LaunchConfigurationName" : { "Ref" : "WebServerAutoScalingLaunchConfiguration" },
        "TargetGroupARNs" : [ { "Ref" : "ELBHTTPTargetGroup" }, { "Ref" : "ELBHTTPSTargetGroup" } ],
        "MaxSize" : { "Ref" : "MaxWebServerCount" },
        "MinSize" : { "Ref" : "MinWebServerCount" },
        "VPCZoneIdentifier" : [ { "Ref" : "WebServerSubnet1" }, { "Ref" : "WebServerSubnet2"} ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "AutoScalingGroup-WebServer" ] ] }, "PropagateAtLaunch" : "true" },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" }, "PropagateAtLaunch" : "true" },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" }, "PropagateAtLaunch" : "true" },
          { "Key" : "Patch Group", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "ProjectName" }, { "Ref" : "StackType" } ]]}, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "WebServerAutoScalingLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : [ "GatewayToInternet", "EC2WebServerSecurityGroup", "RDSInstance", "EC2InstanceProfile", "SQS", "EFS" ],
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
              "ascending" : [
                "EC2Standard",
                "AmazonLinux",
                "WebServer"
              ]
          },

          "EC2Standard": {
            "packages": {
              "yum": {
                "wget": [],
                "awslogs" : [],
                "ruby" : []
              }
            },
            "files": {
              "/etc/awslogs/awscli.conf": {
                "content" : {
                  "Fn::Join": [
                    "",
                    [
                      "[plugins]\n",
                      "cwlogs = cwlogs\n",
                      "[default]\n",
                      { "Fn::Join" : [ "", [ "region = ", { "Ref" : "AWS::Region" }, "\n" ] ] }
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },

              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file = /var/awslogs/state/agent-state\n\n",
                      "[Cloud-Init-Output]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "log_group_name = ",
                            {
                              "Ref": "ProjectName"
                            },
                            "/",
                            {
                              "Ref": "StackType"
                            },
                            "/",
                            { "Ref" : "AWS::StackName" },
                            "/Instance\n"
                          ]
                        ]
                      },
                      "log_stream_name = {instance_id}/Cloud-Init-Output-Logs\n",
                      "datetime_format = %Y-%m-%d %H:%M:%S\n",
                      "time_zone = UTC\n\n",
                      "[Cfn-Init-Cmd]\n",
                      "file = /var/log/cfn-init-cmd.log\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "log_group_name = ",
                            {
                              "Ref": "ProjectName"
                            },
                            "/",
                            {
                              "Ref": "StackType"
                            },
                            "/",
                            { "Ref" : "AWS::StackName" },
                            "/Instance\n"
                          ]
                        ]
                      },
                      "log_stream_name = {instance_id}/Cfn-Init-Cmd-Logs\n",
                      "datetime_format = %Y-%m-%d %H:%M:%S %f\n",
                      "time_zone = UTC\n\n",
                      "[Cron]\n",
                      "file = /var/log/cron\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "log_group_name = ",
                            {
                              "Ref": "ProjectName"
                            },
                            "/",
                            {
                              "Ref": "StackType"
                            },
                            "/",
                            { "Ref" : "AWS::StackName" },
                            "/Instance\n"
                          ]
                        ]
                      },
                      "log_stream_name = {instance_id}/Cron-Logs\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "time_zone = UTC\n\n",
                      "[Secure]\n",
                      "file = /var/log/secure\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "log_group_name = ",
                            {
                              "Ref": "ProjectName"
                            },
                            "/",
                            {
                              "Ref": "StackType"
                            },
                            "/",
                            { "Ref" : "AWS::StackName" },
                            "/Instance\n"
                          ]
                        ]
                      },
                      "log_stream_name = {instance_id}/Secure-Logs\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "time_zone = UTC\n\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {

              "Awslogs_a_create_cloudwatch_state_dir": {
                "command": "mkdir /var/awslogs/ && mkdir /var/awslogs/state/",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "Awslogs_b_enable_cloudwatch_logs": {
                "command": "systemctl enable awslogsd.service",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "Awslogs_c_start_cloudwatch_logs": {
                "command": "systemctl start awslogsd",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "Cloudwatch_Agent_a_download_Cloudwatch_Agent": {
                "command": "wget https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "Cloudwatch_Agent_b_unzip_Cloudwatch_Agent": {
                "command": "/usr/bin/unzip -o /tmp/AmazonCloudWatchAgent.zip -d /tmp",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "Cloudwatch_Agent_c_install_Cloudwatch_Agent": {
                "command": "/tmp/install.sh",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "Cloudwatch_Agent_d_start_Cloudwatch_Agent": {
                "command": "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a start",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "ssm_agent_a_install_ssm_agent": {
                "command": "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
                "cwd": "/tmp",
                "ignoreErrors": "true"
              },

              "code_deploy_agent_a_download_code_deploy_agent" : {
                "command" : { "Fn::Join" : [ "", [ "wget https://aws-codedeploy-", { "Ref" : "AWS::Region" }, ".s3.amazonaws.com/latest/install" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "code_deploy_agent_b_chmod_code_deploy_agent" : {
                "command" : "chmod +x /tmp/install",
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              }

            }
          },

          "AmazonLinux" : {
            "commands" : {

              "EFS_a_enable_php72_amazon_linux_extras" : {
                "command" : { "Fn::Join" : [ "", [ "amazon-linux-extras enable php7.2" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              }

            }
          },

          "WebServer" : {

            "files" : {

              "/tmp/health-check.html" : {
                  "content" : { "Fn::Join" : ["", [
                  "<html>\n",
                  " <title>ELB Health-Check</title>\n",
                  " <body>AWS ELB Health-Check Page</body>\n",
                  "</html>\n"
                ] ] },
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },

              "/home/ec2-user/service-config.cfg" : {
                "content" : { "Fn::Join" : ["", [
                  { "Ref" : "DomainName" } , "\n"
                ] ] },
                "mode"  : "000600",
                "owner" : "root",
                "group" : "root"
              },

              "/home/ec2-user/database-credentials.cfg" : {
                  "content" : { "Fn::Join" : ["", [
                  { "Fn::GetAtt" : [ "RDSInstance", "Endpoint.Address" ] }, "\n",
                  { "Ref" : "DBName" } , "\n",
                  { "Ref" : "DBUserName" }, "\n",
                  { "Ref" : "DBPassword" }, "\n"
                ] ] },
                "mode"  : "000600",
                "owner" : "root",
                "group" : "root"
              },

              "/home/ec2-user/opcache_php.ini" : {
                "content" : { "Fn::Join" : ["", [
                  "opcache.enable=1\n",
                  "opcache.memory_consumption=512\n",
                  "opcache.interned_strings_buffer=64\n",
                  "opcache.max_accelerated_files=32531\n",
                  "opcache.validate_timestamps=1\n",
                  "opcache.save_comments=1\n",
                  "opcache.fast_shutdown=0\n",
                  "opcache.revalidate_freq=300'\n"
                ] ] },
                "mode"  : "000600",
                "owner" : "root",
                "group" : "root"
              }

            },

            "packages" : {
              "yum" : {
                "amazon-efs-utils" : [],
                "httpd-2.4.6-67.amzn2.6.1" : [],
                "mod_ssl-2.4.6-67.amzn2.6.1" : [],
                "mariadb" : [],
                "php" : [],
                "php-mysqlnd" : [],
                "php-mbstring" : [],
                "php-opcache" : [],
                "perl-Switch" : [],
                "perl-DateTime" : [],
                "perl-Sys-Syslog" : [],
                "perl-LWP-Protocol-https" : []
              }
            },

            "commands" : {

              "EFS_a_mount_efs" : {
                "command" : { "Fn::Join" : [ "", [ "mkdir -p /var/www/html/wp-content/uploads/" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "EFS_b_mount_efs" : {
                "command" : { "Fn::Join" : [ "", [ "mount -t efs ", { "Ref" : "EFS" }, ":/ /var/www/html/wp-content/uploads/" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "EFS_c_update_fstab" : {
                "command" : { "Fn::Join" : [ "", [ "echo '", { "Ref" : "EFS" } , " /mnt/efs efs defaults,_netdev 0 0' | sudo tee -a /etc/fstab" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "ELB_health_check_a_move_ELB_healthcheck_file" : {
                "command" : "mv /tmp/health-check.html /var/www/html/",
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "OpCache_a_enable_and_configure" : {
                "command" : { "Fn::Join" : [ "", [ "cp /etc/php.ini /home/ec2-user/php.ini" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "OpCache_b_enable_and_configure" : {
                "command" : { "Fn::Join" : [ "", [ "chmod 644 /home/ec2-user/php.ini" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "OpCache_c_enable_and_configure" : {
                "command" : { "Fn::Join" : [ "", [ "cat /home/ec2-user/opcache_php.ini >> /home/ec2-user/php.ini" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "OpCache_d_enable_and_configure" : {
                "command" : { "Fn::Join" : [ "", [ "chmod 644 /home/ec2-user/php.ini" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "OpCache_e_enable_and_configure" : {
                "command" : { "Fn::Join" : [ "", [ "cp /home/ec2-user/php.ini /etc/php.ini" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              },

              "OpCache_f_enable_and_configure" : {
                "command" : { "Fn::Join" : [ "", [ "service httpd restart" ] ] },
                "cwd" : "/tmp",
                "ignoreErrors" : "true"
              }

            },

            "services" : {

              "sysvinit" : {

                "httpd" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "sources" : [ "/var/www/html" ]
                }

              }
            }

          }
        }
      },
      "Properties" : {
        "AssociatePublicIpAddress" : "True",
        "EbsOptimized" : "False",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                     { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "WebServerInstanceType" }, "Arch" ] } ] },
        "InstanceMonitoring" : { "Ref" : "WebServerInstanceMonitoring" },
        "InstanceType" : { "Ref" : "WebServerInstanceType" },
        "IamInstanceProfile" : { "Fn::GetAtt" : [ "EC2InstanceProfile", "Arn"] },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ { "Ref" : "EC2WebServerSecurityGroup" } ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : ["", [
              "#!/bin/bash -v\n",
              "aws configure set default.region ", { "Ref" : "AWS::Region" }, " \n",
              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'EC2 Configuration Started.'\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Updating all packages using Yum.'\n",
              "yum update -y\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Updating cfn-init using Yum.'\n",
              "yum update -y aws-cfn-bootstrap\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Executing cfn-init.'\n",
              "/opt/aws/bin/cfn-init --stack ", { "Ref" : "AWS::StackName" }, " --configsets ascending --resource WebServerAutoScalingLaunchConfiguration --region ", { "Ref" : "AWS::Region" }, " > /var/log/cfn-init.error.log\n",
              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Completed cfn-init'\n",
              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'EC2 Configuration Completed.'\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Cleaning up left over files from yum installations.'\n",
              "yum clean all\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Installing CodeDeploy Agent.'\n",
              "/tmp/install auto\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Completed cleaning up after yum.'\n",

              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Cleaning up /tmp folder.'\n",
              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'Clean-up of /tmp complete.'\n",
              "/opt/aws/bin/cfn-signal --success true --stack ", { "Ref" : "AWS::StackName" }, " --resource WebServerAutoScalingGroup --region ", { "Ref" : "AWS::Region"}, "\n"
            ] ]
          }
        }
      }
    },

    "WebServerAutoScalingScaleUpPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
        "Properties" : {
           "AdjustmentType" : "ChangeInCapacity",
           "AutoScalingGroupName" : { "Ref" : "WebServerAutoScalingGroup" },
           "Cooldown" : "300",
           "PolicyType" : "SimpleScaling",
           "ScalingAdjustment" : { "Ref" : "ScalingIncrement" }
        }
     },

     "WebServerAutoScalingScaleDownPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
        "Properties" : {
           "AdjustmentType" : "ChangeInCapacity",
           "AutoScalingGroupName" : { "Ref" : "WebServerAutoScalingGroup" },
           "Cooldown" : "300",
           "PolicyType" : "SimpleScaling",
           "ScalingAdjustment" : { "Fn::Join" : [ "" , [ "-", { "Ref" : "ScalingIncrement" } ] ] }
        }
     },

     "WebServerAutoScalingCPUHighAlarm" : {
         "Type" : "AWS::CloudWatch::Alarm",
         "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
         "Properties" : {
            "ActionsEnabled" : "True",
            "AlarmActions" : [ { "Ref" : "WebServerAutoScalingScaleUpPolicy" } ],
            "AlarmDescription" : "Alarm to trigger a scale up event on the scaling group when CPU gets to high.",
            "AlarmName" : { "Fn::Join" : [ "-" , [ { "Ref" : "AWS::StackName" }, "AutoScaling-ScaleUp-Alarm" ] ] },
            "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
            "Dimensions" : [
              {
                "Name" : "AutoScalingGroupName",
                "Value" : { "Ref" : "WebServerAutoScalingGroup" }
              }
            ],
            "EvaluationPeriods" : "5",
            "MetricName" : "CPUUtilization",
            "Namespace" : "AWS/EC2",
            "Period" : "300",
            "Statistic" : "Average",
            "Threshold" : "80",
            "Unit" : "Percent"
         }
      },

      "WebServerAutoScalingCPUNormalAlarm" : {
         "Type" : "AWS::CloudWatch::Alarm",
         "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
         "Properties" : {
            "ActionsEnabled" : "True",
            "AlarmActions" : [ { "Ref" : "WebServerAutoScalingScaleDownPolicy" } ],
            "AlarmDescription" : "Alarm to trigger a scale up event on the scaling group when CPU gets to high.",
            "AlarmName" : { "Fn::Join" : [ "-" , [ { "Ref" : "AWS::StackName" }, "AutoScaling-ScaleDown-Alarm" ] ] },
            "ComparisonOperator" : "LessThanOrEqualToThreshold",
            "Dimensions" : [
              {
                "Name" : "AutoScalingGroupName",
                "Value" : { "Ref" : "WebServerAutoScalingGroup" }
              }
            ],
            "EvaluationPeriods" : "5",
            "MetricName" : "CPUUtilization",
            "Namespace" : "AWS/EC2",
            "Period" : "600",
            "Statistic" : "Average",
            "Threshold" : "60",
            "Unit" : "Percent"
         }
      },

      "WebServerCodeDeployApplication":{
        "Type" : "AWS::CodeDeploy::Application",
        "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
        "Properties" : {
          "ApplicationName" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" } ] ] }
        }
      },

      "WebServerCodeDeployDeploymentGroup" : {
        "Type" : "AWS::CodeDeploy::DeploymentGroup",
        "DependsOn" : "WebServerCodeDeployApplication",
        "Properties" : {
          "ApplicationName" : { "Ref" : "WebServerCodeDeployApplication" },
          "AutoScalingGroups" : [ { "Ref" : "WebServerAutoScalingGroup" } ],
          "DeploymentGroupName" :  { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Deployment-Group"] ] },
          "ServiceRoleArn": { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/", { "Ref" : "CodeDeployTrustRole" } ]]}
        }
      },

      "S3Bucket" : {
        "Type" : "AWS::S3::Bucket",
        "Properties" : {
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Logs" ] ] } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
            { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
          ]
        }
      },

      "S3BucketPolicy" : {
         "Type" : "AWS::S3::BucketPolicy",
         "Properties" : {
            "Bucket" : { "Ref" : "S3Bucket" },
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Id": "Policy1475025065271",
              "Statement": [
                {
                  "Sid": "Stmt1475025063221",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Fn::FindInMap" : [ "ELBPrinciple", { "Ref" : "AWS::Region" }, "AccountID" ] }, ":root" ] ] }
                  },
                  "Action": "s3:PutObject",
                  "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ] ] }
                }
              ]
            }
         }
      },

      "CloudFrontDistribution": {
        "Type" : "AWS::CloudFront::Distribution",
        "Condition" : "CreateCloudFront",
        "DependsOn": ["WebServerELB", "S3Bucket"],
        "Properties": {
          "DistributionConfig": {
            "Aliases" : [
              {
                "Fn::If" : [
                  "UseAltCNAME",
                  { "Ref" : "DomainName"},
                  { "Ref" : "AWS::NoValue"}
                ]
              }
            ],
            "DefaultCacheBehavior" :
            {
              "AllowedMethods" : [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ],
              "CachedMethods" : [ "GET", "HEAD", "OPTIONS" ],
              "Compress" : "True",
              "ForwardedValues" : {
                "Cookies" : {
                  "Forward" : "whitelist",
                  "WhitelistedNames" : [
                    "PHPSESSID",
                    "AWSALB",
                    "comment_author_*",
                    "comment_author_email_*",
                    "comment_author_url_*",
                    "wordpress_logged_in_*",
                    "wordpress_test_cookie",
                    "wordpress_sec_*",
                    "wp-settings-*"
                  ]
                },
                "QueryString" : "True",
                "Headers" : [ "Host", "Origin" ]
              },
              "DefaultTTL" : "86400",
              "MaxTTL" : "172800",
              "MinTTL" : "86400",
              "TargetOriginId" : { "Ref" : "WebServerELB" },
              "ViewerProtocolPolicy" : "redirect-to-https"
            },
            "CacheBehaviors" : [
              {
                "AllowedMethods" : [ "GET", "HEAD", "OPTIONS" ],
                "CachedMethods" : [ "GET", "HEAD", "OPTIONS" ],
                "DefaultTTL" : "86400",
                "MaxTTL" : "604800",
                "MinTTL" : "0",
                "Compress" : "True",
                "PathPattern" : "/wp-content/*",
                "SmoothStreaming" : "False",
                "TargetOriginId" : { "Ref" : "WebServerELB" },
                "ViewerProtocolPolicy" : "redirect-to-https",
                "ForwardedValues" : {
                  "QueryString" : "False",
                  "Headers" : [ "Host", "Origin" ]
                }
              },
              {
                "AllowedMethods" : [ "GET", "HEAD", "OPTIONS" ],
                "CachedMethods" : [ "GET", "HEAD", "OPTIONS" ],
                "DefaultTTL" : "86400",
                "MaxTTL" : "604800",
                "MinTTL" : "0",
                "Compress" : "True",
                "PathPattern" : "/wp-includes/*",
                "SmoothStreaming" : "False",
                "TargetOriginId" : { "Ref" : "WebServerELB" },
                "ViewerProtocolPolicy" : "redirect-to-https",
                "ForwardedValues" : {
                  "QueryString" : "False",
                  "Headers" : [ "Host", "Origin" ]
                }
              },
              {
                "AllowedMethods" : [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ],
                "CachedMethods" : [ "GET", "HEAD", "OPTIONS" ],
                "Compress" : "True",
                "ForwardedValues" : {
                  "Cookies" : {
                    "Forward" : "whitelist",
                    "WhitelistedNames" : [
                      "PHPSESSID",
                      "AWSALB",
                      "comment_author_*",
                      "comment_author_email_*",
                      "comment_author_url_*",
                      "wordpress_logged_in_*",
                      "wordpress_test_cookie",
                      "wordpress_sec_*",
                      "wp-settings-*"
                    ]
                  },
                  "Headers" : [ "Host", "Origin" ],
                  "QueryString" : "True"
                },
                "PathPattern" : "/wp-login.php",
                "SmoothStreaming" : "False",
                "TargetOriginId" : { "Ref" : "WebServerELB" },
                "ViewerProtocolPolicy" : "redirect-to-https"
              },
              {
                "AllowedMethods" : [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ],
                "CachedMethods" : [ "GET", "HEAD", "OPTIONS" ],
                "Compress" : "True",
                "ForwardedValues" : {
                  "Cookies" : {
                    "Forward" : "whitelist",
                    "WhitelistedNames" : [
                      "PHPSESSID",
                      "AWSALB",
                      "comment_author_*",
                      "comment_author_email_*",
                      "comment_author_url_*",
                      "wordpress_logged_in_*",
                      "wordpress_test_cookie",
                      "wordpress_sec_*",
                      "wp-settings-*"
                    ]
                  },
                  "Headers" : [ "Host", "Origin" ],
                  "QueryString" : "True"
                },
                "PathPattern" : "/wp-admin/*",
                "SmoothStreaming" : "False",
                "TargetOriginId" : { "Ref" : "WebServerELB" },
                "ViewerProtocolPolicy" : "redirect-to-https"
              }
            ],
            "Enabled" : "True",
            "IPV6Enabled" : "True",
            "Logging" : {
              "Bucket" : { "Fn::Join" : [ ".", [ { "Ref" : "S3Bucket" }, "s3.amazonaws.com" ] ] },
              "IncludeCookies" : "True",
              "Prefix" : "CloudFront"
            },
            "Origins" : [
              {
                "CustomOriginConfig" : {
                  "HTTPPort" : "80",
                  "HTTPSPort" : "443",
                  "OriginKeepaliveTimeout" : "60",
                  "OriginReadTimeout" : "30",
                  "OriginProtocolPolicy" : "https-only",
                  "OriginSSLProtocols" : [ "TLSv1", "TLSv1.1", "TLSv1.2" ]
                },
                "DomainName" : { "Fn::GetAtt" : [ "WebServerELB", "DNSName" ] },
                "Id" : { "Ref" : "WebServerELB" }
              }
            ],
            "PriceClass" : "PriceClass_All",
            "HttpVersion" : "http2",
            "ViewerCertificate" : {
              "AcmCertificateArn" : { "Fn::Join" : [ "", [ "arn:aws:acm:", "us-east-1", ":", { "Ref" : "AWS::AccountId" }, ":certificate/", { "Ref" : "CloudFrontCertificate" } ] ] },
              "MinimumProtocolVersion" : "TLSv1.1_2016",
              "SslSupportMethod" : "sni-only"
            }
          },
          "Tags": [
            { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "CloudFrontDistribution" ] ] } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
            { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }
          ]
        }
      },

      "WebServerCodePipeline" : {
        "Type" : "AWS::CodePipeline::Pipeline",
        "Condition" : "CreateCodePipeline",
        "DependsOn" : ["WebServerAutoScalingLaunchConfiguration", "WebServerCodePipelineRole", "S3Bucket"],
        "Properties" : {
          "ArtifactStore" : {
            "Location" : { "Ref" : "S3Bucket" },
            "Type" : "S3"
          },
          "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "CodePipeline" ] ] },
          "RestartExecutionOnUpdate" : "True",
          "RoleArn" : { "Fn::Join" : [ "", [ "arn:aws:iam::" , { "Ref" : "AWS::AccountId" }, ":role/", { "Ref" : "WebServerCodePipelineRole" } ] ] },
          "Stages" : [
            {
              "Name" :  { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Source" ] ] },
              "Actions" : [
                {
                  "ActionTypeId" : {
                      "Category" : "Source",
                      "Owner" : "AWS",
                      "Provider" : "CodeCommit",
                      "Version" : "1"
                  },
                  "Configuration" : {
                    "BranchName": { "Ref": "CodeCommitBranch" },
                    "RepositoryName" : { "Ref" : "CodeCommitRepositoryName" }
                  },
                  "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Source-Stage-Action" ] ] },
                  "OutputArtifacts" : [
                    {
                      "Name" : "MyApp"
                    }
                  ],
                  "RunOrder" : "1"
                }
              ]
            },
            {
              "Name" :  { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Deploy" ] ] },
              "Actions" : [
                {
                  "ActionTypeId" : {
                      "Category" : "Deploy",
                      "Owner" : "AWS",
                      "Provider" : "CodeDeploy",
                      "Version" : "1"
                  },
                  "Configuration" : {
                    "ApplicationName" : { "Ref" : "WebServerCodeDeployApplication" },
                    "DeploymentGroupName" : { "Ref" : "WebServerCodeDeployDeploymentGroup" }
                  },
                  "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Deploy-Stage-Action" ] ] },
                  "InputArtifacts" : [
                    {
                      "Name" : "MyApp"
                    }
                  ],
                  "RunOrder" : "1"
                }
              ]
            }
          ]
        }
      },

      "WebServerCodePipelineRole" : {
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"codepipeline-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Action":[
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:UploadArchive",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:CancelUploadArchive"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetBucketVersioning"
                  ],
                  "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ] ]},
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "s3:PutObject"
                  ],
                  "Resource":[
                    { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ] ]}
                  ],
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:RegisterApplicationRevision"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "elasticbeanstalk:*",
                    "ec2:*",
                    "elasticloadbalancing:*",
                    "autoscaling:*",
                    "cloudwatch:*",
                    "s3:*",
                    "sns:*",
                    "cloudformation:*",
                    "rds:*",
                    "sqs:*",
                    "ecs:*",
                    "iam:PassRole"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "lambda:InvokeFunction",
                    "lambda:ListFunctions"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                }
              ],
              "Version":"2012-10-17"
            }
          }
        ] }
      },

      "CodeDeployTrustRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Sid": "1",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    { "Fn::Join" : [ "", [ "codedeploy.", { "Ref" : "AWS::Region" }, ".amazonaws.com" ] ] }
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Path": "/"
        }
      },

      "CodeDeployRolePolicies": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "CodeDeployPolicy",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Resource": [
                  "*"
                ],
                "Action": [
                  "ec2:Describe*"
                ]
              },
              {
                "Effect": "Allow",
                "Resource": [
                  "*"
                ],
                "Action": [
                  "autoscaling:CompleteLifecycleAction",
                  "autoscaling:DeleteLifecycleHook",
                  "autoscaling:DescribeLifecycleHooks",
                  "autoscaling:DescribeAutoScalingGroups",
                  "autoscaling:PutLifecycleHook",
                  "autoscaling:RecordLifecycleActionHeartbeat"
                ]
              }
            ]
          },
          "Roles": [
            {
              "Ref": "CodeDeployTrustRole"
            }
          ]
        }
      },

      "EC2InstanceProfile" : {
        "Type": "AWS::IAM::InstanceProfile",
        "DependsOn" : "EC2InstanceRole",
        "Properties": {
          "Path": "/",
          "Roles": [ { "Ref" : "EC2InstanceRole" } ]
        }
      },

      "EC2InstanceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/"
        }
      },

      "EC2InstanceRolePolicies": {
        "Type": "AWS::IAM::Policy",
        "DependsOn" : [ "EC2InstanceRole", "S3Bucket" ],
        "Properties": {
          "PolicyName": "EC2InstanceRolePolicy",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "ec2:*",
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "elasticloadbalancing:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "cloudwatch:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "autoscaling:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "s3:*",
                "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectVersion"
                ],
                "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Repository" }, "/*" ]]}
              },
              {
                "Action": [
                  "s3:GetObject",
                  "s3:GetObjectAcl",
                  "s3:GetObjectVersion"
                ],
                "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::amazon-ssm-", { "Ref" : "AWS::Region"}, "/*"]]},
                "Effect": "Allow"
              },
              {
                "Effect": "Allow",
                "Action": [
                    "sqs:SendMessage",
                    "sqs:SendMessageBatch"
                ],
                "Resource" : { "Fn::GetAtt" : [ "SQS", "Arn" ] }
              },
              {
                "Effect": "Allow",
                "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                ],
                "Resource": [
                    "arn:aws:logs:*:*:*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ssm:DescribeAssociation",
                  "ssm:GetDocument",
                  "ssm:ListAssociations",
                  "ssm:UpdateAssociationStatus",
                  "ssm:UpdateInstanceInformation",
                  "ssm:GetManifest"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ec2messages:AcknowledgeMessage",
                  "ec2messages:DeleteMessage",
                  "ec2messages:FailMessage",
                  "ec2messages:GetEndpoint",
                  "ec2messages:GetMessages",
                  "ec2messages:SendReply"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudwatch:PutMetricData"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeInstanceStatus"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ds:CreateComputer",
                  "ds:DescribeDirectories"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              }
            ]
          },
          "Roles" : [
            {
              "Ref" : "EC2InstanceRole"
            }
          ]
        }
      }
  }, 

  "Outputs" : {
    "BuildMessage" : {
      "Description" : "Follow-up information for admins.",
      "Value" : "Once complete with full configuration remove SSH access from EC2 security group and block port 22 using the NACL."
    },
    "VPCId" : {
      "Description" : "VPCId of the newly created VPC",
      "Value" :  { "Ref" : "VPC" }
    },
    "DNSName" : {
      "Description" : "DNS Hostname for ELB.",
      "Value" : { "Fn::GetAtt" : [ "WebServerELB", "DNSName"] }
    },
    "RDSHostName" : {
      "Description" : "DNS Name for RDS host",
      "Value" : { "Fn::GetAtt" : [ "RDSInstance", "Endpoint.Address" ] }
    },
    "DBUserName" : {
      "Description" : "RDS Database Username.",
      "Value" : { "Ref" : "DBUserName" }
    },
    "DBPassword" : {
      "Description" : "RDS Database Password.",
      "Value" : { "Ref" : "DBPassword" }
    },
    "S3BucketName" : {
      "Description" : "Cloud Stack Temporary S3 Bucket",
      "Value" : { "Ref" : "S3Bucket" }
    },
    "ReferenceDomainName"  : {
      "Description" : "Cloud Stack Temporary S3 Bucket",
      "Value" : { "Ref" : "DomainName" }
    }
  }
}
